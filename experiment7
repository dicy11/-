#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h> 
#include <windows.h>
#include <unistd.h>

struct Account 
{
	char account[19];//账户 
	char code[7];// 密码 
	char name[20];//姓名 
	char IDcard[20];//身份证 
	char tell[12];//电话号码 
	float doller;//金钱 
	
	struct Account *next;
};
 
typedef struct Account Account;

int language;//1->中文->english; 
Account *head=NULL;
Account *tail=NULL;

Account *curAccount=NULL;//定义一个当前账户 
Account *otherAccount=NULL;//定义一个其他的账户 

struct Transtraction
{
	char account[100];//账户 
	time_t timestamp;//时间戳 
	int type;//0->存款 1->取款  2->转账 
	float amount; 
	struct Transtraction *next;	
};

typedef struct Transtraction Transtraction;
Transtraction *tHead=NULL;
Transtraction *tTail=NULL;

int findAccount(Account a)
{
	Account *curp=head;
	while(curp!=NULL)
	{
		if((strcmp(curp->name,a.name)==0)&&(strcmp(curp->code,a.code)==0))
		{
			curAccount=curp; 
			return 1;
		}
		curp=curp->next;
	}
	return 0;
}

void savedata()
{
	FILE* fp=fopen("C:\\Users\\20595\\Desktop\\atm.txt","w"); 
	if(fp!=NULL)
	 {
		 Account* curP=head;
		 while(curP!=NULL)
		 {
		     fprintf(fp,"%s\t%s\t%s\t%s\t%s\t%f\t\n",curP->account,curP->code,curP->name,curP->IDcard,curP->tell,curP->doller);
		     curP=curP->next;	
		 }
	 }
	 fclose(fp);
} 

void savetransTraction()
{
	FILE* fp=fopen("C:\\Users\\20595\\Desktop\\transtraction.txt","w"); 
	if(fp!=NULL)
	 {
		Transtraction* curP=tHead;
		time_t timestamp;
	    struct tm *p;
	    time(&timestamp);
	    p=localtime(&timestamp);
		while(curP!=NULL)
		{
			fprintf(fp,"%s\t%d-%d-%d %d:%d:%d\t%d\t%f\n",curP->account,1900+p->tm_year,1+p->tm_mon,p->tm_mday,8+p->tm_hour,p->tm_min,p->tm_sec,curP->type,curP->amount);
		 	curP=curP->next; 	
		}
	 }
	 fclose(fp);
} 

void loaddata()
{
	FILE* fp=fopen("C:\\Users\\20595\\Desktop\\atm.txt","r");
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建节点 
			Account *NewNode=(Account *)malloc(sizeof(Account));
			
			//节点初始化 
			NewNode->next=NULL;
			fscanf(fp,"%s\t%s\t%s\t%s\t%s\t%f\t\n",NewNode->account,NewNode->code,NewNode->name,NewNode->IDcard,NewNode->tell,&NewNode->doller);
			
			//添加节点到链表
			if(head==NULL)
	         {
	  	        head=NewNode;
	  	        tail=NewNode;
	         }
	         else
	         {
	            tail->next=NewNode;
	  	        tail=NewNode;	
	         }
		} 
		fclose(fp);
	}
}

void updatecode()
{
	if(language==1)
	{
		printf("\t\t#						   				       #\n"); 
		printf("\t\t**请输入您的旧密码：");
		char oldPassword[100];
		scanf("%s",oldPassword);
	    if(strcmp(oldPassword,curAccount->code)==0)
	    	{
			printf("\t\t**请输入您喜欢的新密码：");
			scanf("%s",curAccount->code);
			for(int i=0;i<3;i++)
	        	{
			     if(strcmp(oldPassword,curAccount->code)==0)
			    	{
			    		printf("**\t\t密码不可相同哦，请您重新更改！但是您只拥有三次机会哦\n");
			    		scanf("%s",curAccount->code);
		        	}
		         else 
		    		{
		    			system("cls");
		    			printf("\t\t\t******************************************\n");
						printf("\t\t\t* 				  	*\n"); 		    			
		        		printf("\t\t\t**恭喜您！修改成功！\t\t\t**\n");
						printf("\t\t\t*					 	*\n"); 
						printf("\t\t\t******************************************\n");
    					Sleep(1000);
						break; 		    	
					}	   
     	    	}	
    		}
    	return;
    	system("cls");
    	Sleep(1000);
	}
	else if(language==2)
	{
	  printf("Please put in your oldcode:");
	  char oldPassword[100];
	  scanf("%s",oldPassword);
      if(strcmp(oldPassword,curAccount->code)==0)
    	{
		printf("Please put in your new code:");
		scanf("%s",curAccount->code);
		for(int i=0;i<3;i++)
        	{
		  if(strcmp(oldPassword,curAccount->code)==0)
		    {
		    	printf("Passwords cannot be the same. Please change again! You only have three chances and will exit the program after three times \n");
		    	scanf("%s",curAccount->code);
	     	}
	     else 
	    	{
	        	printf("The modification was successful!\n");
				break; 		    	
			}	   
     	    }	
    	}
    	return;
    }
}

void signIn()
{
	for(int i=0;i<3;i++)
	{
	if(language==1)
	{
		Account a; 
		printf("\t\t#						   				       #\n"); 
		printf("\t\t**请输入您的账号：");
		scanf("%s",a.name);
		printf("\t\t**请输入您的密码：");
		scanf("%s",a.code);
		printf("\n");
		printf("\t\t#						   				       #\n"); 
		
		if(findAccount(a))
		{
			printf("\t\t**恭喜您！登录成功！**\t\t\n");
			Sleep(1000);
			break;
		}
		else
		{
			printf("\t\t**抱歉哦~您登录失败了！**\t\t\n");
			Sleep(1000);
		}
		Sleep(1000);
		system("cls");
     }
	else if(language==2)
	{
		Account a; 
		printf("Please put in your account:");
		scanf("%s",a.name);
		
		printf("Please put in your code:");
		scanf("%s",a.code);
		
		if(findAccount(a))
		{
			printf("Sussessful Landing!\n");
			updatecode();
			break;
		}
		else
		{
			printf("Filed Landing!\n");
		}
	}
 }
}

void signUp()
{
	//申请一块堆内存空间，将其地址赋值给指针newNode(创建节点）
	Account *NewNode=(Account *)malloc(sizeof(Account));
	  if(language==1)
	   {
		printf("\t\t#						   				       #\n"); 
	    printf("\t\t**请您输入您喜欢的账号:");
	    scanf("%s",NewNode->account);
	
        printf("\t\t**请您输入您熟悉的密码：");
	    scanf("%s",NewNode->code);
	
	    printf("\t\t**请您输入您的名号：");
	    scanf("%s",NewNode->name);
	
	    printf("\t\t**请您输入您的身份证件号：");
	    scanf("%s",NewNode->IDcard);
	
	    printf("\t\t**请输入您的电话号码：");
	    scanf("%s",NewNode->tell);
	    printf("恭喜您！创建成功！\n");
	    printf("\t\t#						   				       #\n"); 
       }
       else if(language==2)
	   {
         Account *NewNode=(Account *)malloc(sizeof(Account));
	     NewNode->next=NULL;
	
	     printf("Please put in your account:");
	     scanf("%s",NewNode->account);
	
         printf("Please put in your code:");
	     scanf("%s",NewNode->code);
	
	     printf("Please put in your name:");
	     scanf("%s",NewNode->name);
	
	     printf("Please put in your IDcard:");
	     scanf("%s",NewNode->IDcard);
	
	     printf("Please put in your tellphone:");
	     scanf("%s",NewNode->tell);
	     
	     printf("Create successful\n");
    	 } 
    	 else if(language==3)
		 {
		 	return;
		  } 
	     NewNode->doller=0.0f;
	     NewNode->next=NULL;
	     //添加节点到链表 
	     if(head==NULL)
	         {
	  	        head=NewNode;
	  	        tail=NewNode;
	         }
	       else
	          {
	             tail->next=NewNode;
	  	         tail=NewNode;	
	          }
 }

void saveMoney()
{
	printf("\t\t#						   				       #\n"); 
	printf("\t\t**请输入您想要存入的money：");
	float doller;
	scanf("%f",&doller);
	Sleep(1000);
	printf("\t\t**恭喜您，余额增加啦！\t\t**\n");
	printf("\t\t#						   				       #\n"); 
	curAccount->doller+=doller; 
	//创建节点
	Transtraction *newNode=(Transtraction*)malloc(sizeof(Transtraction));
			
	//节点初始化
	newNode->next=NULL;
	strcpy(newNode->account,curAccount->account);
	newNode->timestamp=time(NULL);
	newNode->type=0;
	newNode->amount=doller;
	
			
	//添加节点到链表
	if(tHead==NULL)
	{
	  	tHead=newNode;
	  	tTail=newNode;
	}
	else
	{
	    tTail->next=newNode;
	  	tTail=newNode;	
	}
	
	Sleep(1000);
	system("cls");
}

void drawMoney()
{
	if(language==1)
	 {
		printf("\t\t#						   				       #\n"); 
		printf("\t\t**请输入您想要取出的金额:");
		float doller;
		scanf("%f",&doller);
		//验证金额数量是否足够
		if(curAccount->doller>=doller)
		{
			printf("\t\t**恭喜您！已取款成功!**\t\t\n");
			curAccount->doller-=doller;
			//产生交易记录
			
			//创建节点
			Transtraction *newNode=(Transtraction*)malloc(sizeof(Transtraction));
				
			//节点初始化
			newNode->next=NULL;
			strcpy(newNode->account,curAccount->account);
			newNode->timestamp=time(NULL);
			newNode->type=1;
			newNode->amount=doller;
				
			//添加节点到链表
			 if(tHead==NULL)
		        {
			        tHead=newNode;
	   	            tTail=newNode;
			    }
			 else
			    {
			        tTail->next=newNode;
			  	    tTail=newNode;	
			    }
		}
		else
		{
			printf("\t\t**抱歉哦~您的余额不足!**\t\t\n"); 
		} 
	 }
		else if(language==2)
		{
			printf("\t\t#						   				       #\n"); 
			printf("\t\t**enter your draw money：:");
			float doller;
			scanf("%f",&doller);
			printf("\t\t#						   				       #\n"); 
			//验证金额数量是否足够
			if(curAccount->doller>=doller)
			{
			printf("\t\t**Congratulations! Withdrawal succeeded!**\t\t\n");
			Sleep(1000);
			curAccount->doller-=doller;
			//产生交易记录
			
			//创建节点
			Transtraction *newNode=(Transtraction*)malloc(sizeof(Transtraction));
			
			//节点初始化
			newNode->next=NULL;
			strcpy(newNode->account,curAccount->account);
			newNode->timestamp=time(NULL);
			newNode->type=0;
			newNode->amount=doller;
			
			//添加节点到链表
			 if(tHead==NULL)
		         {
		  	        tHead=newNode;
		  	        tTail=newNode;
		         }
		       else
		          {
		             tTail->next=newNode;
		  	         tTail=newNode;	
		          }
	    }
		else
		{
			printf("\t\t**sorry,your credit is running low！**\t\t\n"); 
		} 
		}  
	Sleep(1000);
	system("cls");
}

int findOtherAccount(char otherUsername[])
{
	Account * curp=head;
	while(curp!=NULL)
	{
		if(strcmp(curp->name,otherUsername)==0)	
		{
			otherAccount = curp; 
			return 1;
		}
		curp=curp->next;
	} 
	return 0;
}

void transfer()
{
	printf("\t\t#						   				       #\n"); 
	printf("\t\t**请输入对方账户：");
	char otherUsername[100];
	scanf("%s",otherUsername);
	printf("\t\t#						   				       #\n"); 
	//判断账户合法性
	if(findOtherAccount(otherUsername))
	{
		printf("\t\t**请输入转账金额：");
		float doller;
		scanf("%f",&doller);
		
		//判断金额的合法性
		if(curAccount->doller>=doller)
		{
			//转账（当前账户余额减少，对方账户余额增多）
			curAccount->doller -= doller;
			otherAccount->doller += doller;
			printf("\t\t**转账成功!**\t\t\n");
		
			//创建节点
			Transtraction * newNode=(Transtraction*)malloc(sizeof(Transtraction));
			
			//节点初始化
			newNode->next=NULL;
			strcpy(newNode->account,curAccount->account);
			newNode->timestamp=time(NULL);
			newNode->type=2;
			newNode->amount=doller;
			
			//添加节点到链表
			 if(tHead==NULL)
		         {
		  	        tHead=newNode;
		  	        tTail=newNode;
		         }
		       else
		          {
		             tTail->next=newNode;
		  	         tTail=newNode;	
		          }
			Sleep(1000);	 
		}
		else
		{
			printf("\t\t**非常遗憾，您的余额不足！**\t\t\n");
		} 
	}
	else
	{
		printf("\t\t**您选择的账户不存在哦~**\t\t\n");
	}
	Sleep(1000); 
	system("cls");
}

void showmoney()	//功能7：查询余额
{
	FILE* fp=fopen("C:\\Users\\20595\\Desktop\\atm.txt","r"); 
	Account* curP=head;
	printf("请您输入您需要查询的账户：\n"); 
	char Name[19];
	scanf("%s",&Name);
	printf("请输入您的密码：\n");
	char Code[7];
	scanf("%s",&Code);
	if(strcmp(Name,curAccount->account)==0&&strcmp(Code,curAccount->code)==0)
	{
		printf("这是您的账户及余额：\n");
		while(curP!=NULL)
		{
			printf("%s\t%f\t\n",curP->account,curP->doller);
			curP=curP->next;
			break;
		}
	}
	else
	{
		printf("没有这个账户哦！\n");
	}
	fclose(fp);
}


void printfLinked()
{
	Account *curP=head;
	while(curP!=NULL)
	{
		printf("%s\t%s\t%s\t%s\t%s\t%f\t\n",curP->account,curP->code,curP->name,curP->IDcard,curP->tell,curP->doller);
		curP=curP->next;
	}
}

void homepage()
{
	system("cls");
	drawMoney();
	saveMoney();
	showmoney();
}

void printfZH()
{
	FILE* fp=fopen("C:\\Users\\20595\\Desktop\\transtraction.txt","w"); 
	printf("\n");
	printf("\t\t这是您的交易记录及交易记录提示：\n");
	printf("\t\t0->存款，1->取款，2->转账\n");
	printf("\n");
	if(fp!=NULL)
	 {
		Transtraction* curP=tHead;
		time_t timestamp;
	    struct tm *p;
	    time(&timestamp);
	    p=localtime(&timestamp);
		while(curP!=NULL)
		{
			printf("\t\t您的账户：%s\t明细交易时间：%d-%d-%d %d:%d:%d\t交易类型：%d\t剩余金额：%f\n",curP->account,1900+p->tm_year,1+p->tm_mon,p->tm_mday,8+p->tm_hour,p->tm_min,p->tm_sec,curP->type,curP->amount);
		 	curP=curP->next; 	
		}
	 }
	 fclose(fp);
}
void Menu()
{
	while(1)
	{
		if(language==1)
		{
			system("cls");
		    printf("\n");
		    printf("\t\t########################################欢迎~~光临##########################################\n");
		    printf("\t\t#						   				       #\n"); 
		    printf("\t\t                           看看您想要实现哪一个项目呢\n");
			printf("\t\t#						   				       #\n"); 
		    printf("\t\t\t\t\t\t[1] 开户\n");
		    printf("\t\t#						   				       #\n"); 
		    printf("\t\t\t\t\t\t[2] 存钱\n");
		    printf("\t\t#						   				       #\n"); 
		    printf("\t\t\t\t\t\t[3] 取钱\n");
		    printf("\t\t#						   				       #\n"); 
		    printf("\t\t\t\t\t\t[4] 修改密码\n");
		    printf("\t\t#						   				       #\n");
			printf("\t\t\t\t\t\t[5] 转账\n");
			printf("\t\t#						   				       #\n");  
		    printf("\t\t\t\t\t\t[6] 余额查询\n");
		    printf("\t\t#						   				       #\n");   
		    printf("\t\t\t\t\t\t[7] 查询交易记录\n");
		    printf("\t\t#						   				       #\n"); 
		    printf("\t\t\t\t\t\t[8] 退出系统\n");
		    printf("\t\t#						   				       #\n");
		    printf("\t\t########################################欢迎~~光临##########################################\n");
		    printf("\n");
			system("pause");
		}
		else if(language==2)
		{
			printf("Sign  up，please chose 1\n");
			printf("Save money，please chose 2\n");
			printf("Draw money，please chose 3\n");
			printf("Change password，please chose 4\n");
			printf("Transfer ，please chose 5\n");
			printf("Balance query，please chose 6\n");
			printf("Query transactions，please chose 7\n");
			printf("Sign out，please chose 8\n");
		}
		int n;
	    scanf("%d",&n);
		if(n==1)
		{
	    	system("cls");
			signUp();
			system("pause");
		}
		else if(n==2)
		{
			system("cls");
			signIn();
			saveMoney();	
			system("pause");
		} 
		else if(n==3)
		{
			system("cls");
			signIn();
			drawMoney(); 	
			system("pause");	
		} 
		else if(n==4)
		{
			system("cls");
			signIn();
			updatecode();
			system("pause");
		}
		else if(n==5)
		{	
			system("cls");
			signIn();
			transfer();
			system("pause");
		} 
		else if(n==6)
		{
			system("cls");
			signIn();
		 	showmoney(); 
			system("pause");
		} 
		else if(n==7)
		{
			system("cls");
			signIn();
			savetransTraction();
			printfZH();			
			system("pause");
		} 
		else if(n==8)
		{
			system("cls");
		 	break;
			system("pause");
		} 
	}	
}

void cover() 
{
	printf("\t\t\t\t*****************************************\t\t\t\t\n");
	printf("\t\t\t\t*                                        *\t\t\t\t\n");	
	printf("\t\t\t\t*        欢迎光临靓女的专用银行！！！    *\t\t\t\t\n");
	printf("\t\t\t\t*                                        *\t\t\t\t\n");
	printf("\t\t\t\t******************************************\t\t\t\t\n");
	printf("\n");
	printf("\n");
	printf("\n");
	system("pause");
	system("cls");
	printf("\t\t################################欢迎~~光临######################################\n");
	printf("\t\t#			  		   				       #\n"); 
	printf("\t\t#                   \t 中文服务，您就选择1                                  #\n");
	printf("\t\t#               \t English Service,just chose 2                           #\n");
	printf("\t\t#			   		   				       #\n"); 
	printf("\t\t################################欢迎~~光临######################################\n");
}

void byebye()
{
	if(language==1)
	{
		system("cls");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\t\t\t\t\t************欢迎下次使用！************\t\t\t\t\t\t\t\n");
		printf("\n");
		printf("\n");
		printf("\n");	
	}
	else if(language==2)
	{
		system("cls");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\t\t\t\t\t************Welcome to use next time!************\t\t\t\t\t\t\t\n");
		printf("\n");
		printf("\n");
		printf("\n");	
	}
} 

int main()
{
	cover();
	loaddata(); 
	scanf("%d",&language);
	Sleep(1000);
	Menu();
	printfLinked();
	system("pause");
	savedata();
	byebye();
	return 0;
}
